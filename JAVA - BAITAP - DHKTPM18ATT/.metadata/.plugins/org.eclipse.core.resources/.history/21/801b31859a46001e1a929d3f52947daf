/*
 * @ (#)  BankTest.java   2023-06    Aug 28, 2023
 *
 * Copyright (c) 2023  IUH. All rights reserved.
 * Ho Chi Minh City
 */

package iuh.fit.se;

import org.junit.jupiter.api.Test;

import iuh.fit.se.Bank;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThrows;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;


/*
 * @description:
 * @author:  	 Hoang Nghiem Ly
 * @work at:	 IUH
 * @date:    	 Aug 28, 2023
 * @time:		 3:45:19 PM
 * @verison: 	 2023-06
 * @location:    Ho Chi Minh City
 */

class BankTest {
	private Bank bank;
	@BeforeEach
	
	
	void setUp() {
		bank = new Bank("IUH Bank", 5);
		bank.addNew("1234-5678-9012", "Nghiem", 1500.0);
		bank.addNew("1234-5678-9000", "Anna Nguyen", 150.5);
		bank.addNew("1234-5678-9011", "Josie Nguyen", 1504.0);
		bank.addNew("1234-5678-9013", "Mina Tran", 1605.0);
		bank.addNew("1234-5678-9014", "Ly Nina", 1705.0);
		
	}
	
	@Test
	public void testFind() {
		BankAccount account = bank.find("1234-5678-9000");
		assertEquals("1234-5678-9005", account.getAccountNumber());
	}
	@Test
	public void testAddNewFull() {
		Exception ex = assertThrows(IllegalArgumentException.class, () -> {
			bank.addNew("1234-5678-9000", "Anna Nguyen", 150.5);
		});
		assertEquals("Bank is full", ex.getMessage());
		assertEquals(IllegalArgumentException.class, ex.getClass());
	}
	
	
	
	
	

	@Test
	void testAddNew() {
		Bank bank = new Bank("My Bank", 3);
		bank.addNew("1234-5678-9012", "Nghiem", 1550.0);
		bank.addNew("1234-5678-9011", "Nghiem Hoang", 1560.0);
		bank.addNew("1234-5678-9013", "Ly Hoang Nghiem", 170.5);
		assertEquals(2, bank.getNumberOfAccounts());
	}
	
	@Test
	void testAddNewDuplicatedAccountNumber() {
	    Bank bank = new Bank("ABC", 2);
	    bank.addNew("8888-9999-7776", "Anh Hai Lua", 150.5);
		bank.addNew("8888-9999-7777", "Ly Hoang Nghiem", 100.0);
		assertThrows(IllegalArgumentException.class, () -> {
			bank.addNew("8888-9999-7777", "Anh Ba Báo", 150.0);
		});
	}
	
	@Test 
	void testAddNewBankFull() {
		Bank bank = new Bank("CDE", 2);
		bank.addNew("1234-5678-9012", "Nguyen Van B", 1000.0);
		bank.addNew("2345-6789-0123", "Nguyen Van C", 1500.0);
		assertThrows(IllegalArgumentException.class, () -> {
			bank.addNew("3456-7890-1234", "Alice Johnson", 2000.0);
		});
	}
	@Test
	void testFindExistingAccount() {
		Bank bank = new Bank("My Bank", 2);
		bank.addNew("1234-5678-9012", "Mat Nai Cha Cha Cha", 1000.5);
		bank.addNew("8888-9999-1010", "Tran An", 1589.5);
		assertNotNull(bank.find("1234-5678-9010"));
	}
	@Test
	void testFindNonExistingAccount() {
		Bank bank = new Bank("Me Yeu", 3);
		bank.addNew("5555-6666-4444", "Cay ATM Di Dong", 1500.5);
		bank.addNew("4444-6666-3123", "Hoang Nghiem Ly", 1589.5);
		assertNull(bank.find("2345-6789-0123"));
	}
}
